{
	"info": {
		"_postman_id": "967b99fc-e10b-447a-80f7-5265963228e3",
		"name": "FGAC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2963691",
		"_collection_link": "https://lefoodie.postman.co/workspace/lefoodie~817a29c6-e4ad-485f-8e80-fa76dc8c7e2d/collection/2963691-967b99fc-e10b-447a-80f7-5265963228e3?action=share&source=collection_link&creator=2963691"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "CREATEGroupNODE1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"name\": \"Group1\",\r\n    \"type\":\"UA\",\r\n    \"id\": \"11c408e0-1fcd-11ee-be56-0242ac120004\",\r\n    \"properties\": [\r\n    ]\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/nodes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATEGroupNODE2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"name\": \"Group2\",\r\n    \"type\":\"UA\",\r\n    \"id\": \"11c408e0-1fcd-11ee-be56-0242ac120005\",\r\n    \"properties\": [\r\n    ]\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/nodes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATEONODE",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oId\": \"11c408e0-1fcd-11ee-be56-0242ac120006\",\r\n    \"oEntityClass\":\"GroupProperty\",\r\n    \"uaId\":\"11c408e0-1fcd-11ee-be56-0242ac120004\",\r\n    \"oaProperties\":[\r\n        {\r\n    \r\n        \"key\":\"readProperties\",\r\n          \"value\":\"a,b,c,d,e\"\r\n        },\r\n        {\r\n    \r\n            \"key\":\"writeProperties\",\r\n            \"value\":\"a,b,c,d,e\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/createntitynodeforgroup/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"createntitynodeforgroup",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATECONNECTIONNode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oId\": \"11c408e0-1fcd-11ee-be56-0242ac120006\",\r\n    \"uaIdCalling\":\"11c408e0-1fcd-11ee-be56-0242ac120004\",\r\n    \"uaIdTarget\":\"11c408e0-1fcd-11ee-be56-0242ac120005\",\r\n    \"oaProperties\":[\r\n        {\r\n    \r\n        \"key\":\"readProperties\",\r\n          \"value\":\"a,b,c,d\"\r\n        },\r\n        {\r\n    \r\n            \"key\":\"writeProperties\",\r\n            \"value\":\"a,b,c\"\r\n        }\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/createntitynodeforgroup/connect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"createntitynodeforgroup",
								"connect"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRightsEntity Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8085/api/v1/nodes/11c408e0-1fcd-11ee-be56-0242ac120006/rights?callinggroup=11c408e0-1fcd-11ee-be56-0242ac120004&targetgroup=11c408e0-1fcd-11ee-be56-0242ac120005",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"v1",
								"nodes",
								"11c408e0-1fcd-11ee-be56-0242ac120006",
								"rights"
							],
							"query": [
								{
									"key": "callinggroup",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120004"
								},
								{
									"key": "targetgroup",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRightsEntity Copy 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8085/api/v1/nodes/rights?callinggroup=11c408e0-1fcd-11ee-be56-0242ac120005&typeClass=GroupProperty",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"v1",
								"nodes",
								"rights"
							],
							"query": [
								{
									"key": "callinggroup",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								},
								{
									"key": "typeClass",
									"value": "GroupProperty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rights for Object",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/nodes/rights?oId=dedef695-9488-46e8-a4c7-f13a5701cd68&uaIdCalling=ef55dfc2-2366-4690-9664-0abacb9c7d29&uaIdTarget=4890013c-9071-47e4-a733-10d1eb764fc0&typeClass=GroupProperty",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"nodes",
								"rights"
							],
							"query": [
								{
									"key": "oId",
									"value": "dedef695-9488-46e8-a4c7-f13a5701cd68"
								},
								{
									"key": "uaIdCalling",
									"value": "ef55dfc2-2366-4690-9664-0abacb9c7d29"
								},
								{
									"key": "uaIdTarget",
									"value": "4890013c-9071-47e4-a733-10d1eb764fc0"
								},
								{
									"key": "typeClass",
									"value": "GroupProperty"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Identity1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"id\": \"11c408e0-1fcd-11ee-be56-0242ac120004\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/identity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identity"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetGroup1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/identity//11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identity",
								"",
								"11c408e0-1fcd-11ee-be56-0242ac120005"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetGroup1 Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/identity//11c408e0-1fcd-11ee-be56-0242ac120006",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identity",
								"",
								"11c408e0-1fcd-11ee-be56-0242ac120006"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"id\": \"11c408e0-1fcd-11ee-be56-0242ac120006\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/identity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Object",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identityId\": \"11c408e0-1fcd-11ee-be56-0242ac120005\",\r\n    \"objectId\": \"03389644-a202-449a-8906-69fab4dbd138\",\r\n    \"objectEntityClass\": \"Carw\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/object",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"object"
							]
						}
					},
					"response": []
				},
				{
					"name": "Object",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identityId\": \"11c408e0-1fcd-11ee-be56-0242ac120005\",\r\n    \"objectEntityClass\": \"Motorbike\",\r\n    \"properties\": [\r\n        \"farbe\",      \r\n         \"wheels\",\r\n          \"wheels\",  \r\n        \"fuel\",\r\n        \"doors\",\r\n        \"type\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/object/03389644-a202-449a-8906-69fab4dbd137",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"object",
								"03389644-a202-449a-8906-69fab4dbd137"
							]
						}
					},
					"response": []
				},
				{
					"name": "Object",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/object/03389644-a202-449a-8906-69fab4dbd137",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"object",
								"03389644-a202-449a-8906-69fab4dbd137"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteObject",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/object/03389644-a202-449a-8906-69fab4dbd137?requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"object",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Access",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"readProperties\": [ \r\n                \"a\",\r\n                \"b\",\r\n                \"c\",\r\n                \"farbe\"\r\n            ],\r\n        \"writeProperties\":  [ \r\n                \"a\",\r\n                \"b\",\r\n                \"doors\",\r\n                \"farbe\"\r\n            ]\r\n    }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/03389644-a202-449a-8906-69fab4dbd137?identityId=11c408e0-1fcd-11ee-be56-0242ac120006&requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "identityId",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								},
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Access",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"readProperties\": [\r\n        \"wheels\",\r\n         \"wheels\",\r\n        \"doors\",\r\n        \"fuel\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"farbe\",\r\n        \"wheels\"\r\n       \r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"color\",\r\n        \"doors\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"color\",\r\n        \"doors\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/03389644-a202-449a-8906-69fab4dbd137?identityId=11c408e0-1fcd-11ee-be56-0242ac120006&requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "identityId",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								},
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAccess",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/03389644-a202-449a-8906-69fab4dbd137?identityId=11c408e0-1fcd-11ee-be56-0242ac120006&requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "identityId",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								},
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessById",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/03389644-a202-449a-8906-69fab4dbd137?identityId=11c408e0-1fcd-11ee-be56-0242ac120006&requestedById=11c408e0-1fcd-11ee-be56-0242ac120006",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "identityId",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								},
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessById Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/525ba447-9497-4311-bf3c-f087ad895a42?identityId=4078b3f3-5952-43df-a264-f14f461e7998&requestedById=4078b3f3-5952-43df-a264-f14f461e7998",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"525ba447-9497-4311-bf3c-f087ad895a42"
							],
							"query": [
								{
									"key": "identityId",
									"value": "4078b3f3-5952-43df-a264-f14f461e7998"
								},
								{
									"key": "requestedById",
									"value": "4078b3f3-5952-43df-a264-f14f461e7998"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessById Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessTokenUrl",
									"value": "https://auth.transit-project.de/realms/TRANSIT-PROJECT-LOCAL/protocol/openid-connect/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://auth.transit-project.de/realms/TRANSIT-PROJECT-LOCAL/protocol/openid-connect/auth",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "{{client-secret}}",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{client-id}}",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "password",
									"value": "47A9A4C13E15447641D4AAB7836DEFE1",
									"type": "string"
								},
								{
									"key": "username",
									"value": "koch@infai.org",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": true,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/v1/access/620cee3d-272d-4f25-89d8-becbed87c048?identityId=9d0011db-1462-4cb2-b610-a1a6b93e433f&requestedById=9d0011db-1462-4cb2-b610-a1a6b93e433f",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"v1",
								"access",
								"620cee3d-272d-4f25-89d8-becbed87c048"
							],
							"query": [
								{
									"key": "identityId",
									"value": "9d0011db-1462-4cb2-b610-a1a6b93e433f"
								},
								{
									"key": "requestedById",
									"value": "9d0011db-1462-4cb2-b610-a1a6b93e433f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessById OtherComp",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "614D5358726EC07655BF4A38CA751A74C80F42CE571E5055FEF920ECCAC2624C",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/03389644-a202-449a-8906-69fab4dbd137?identityId=11c408e0-1fcd-11ee-be56-0242ac120006&requestedById=11c408e0-1fcd-11ee-be56-0242ac120006",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"03389644-a202-449a-8906-69fab4dbd137"
							],
							"query": [
								{
									"key": "identityId",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								},
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120006"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessByList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.objects).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Objects array is empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.objects).to.be.an('array').and.to.have.lengthOf(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"objectIds\":\r\n    [\r\n    \"d8a2e675-8d75-44ce-91ca-28ee2b20b4d3\",\r\n    \"b26f25e2-d95d-482c-9829-d51cdd975da6\",\r\n    \"744901a7-73c2-4a8c-8262-125fe79fef76\",\r\n    \"563e19a1-08e7-419f-978f-261eddad785b\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/?identityId=f7e1f51c-1dd6-40d1-8269-4055b99f6b2b&requestedById=f7e1f51c-1dd6-40d1-8269-4055b99f6b2b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								""
							],
							"query": [
								{
									"key": "identityId",
									"value": "f7e1f51c-1dd6-40d1-8269-4055b99f6b2b"
								},
								{
									"key": "requestedById",
									"value": "f7e1f51c-1dd6-40d1-8269-4055b99f6b2b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessByList OtherComp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.objects).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Objects field is an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.objects).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Objects field is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.objects).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"objectIds\":\r\n    [\r\n    \"484a71ac-bcc7-41de-be82-c2b6ad1f8341\",\r\n    \"bb7d2305-4ff7-4ceb-9f74-e48ad3571f3c\",\r\n    \"1aed9bfc-7e6a-4e7e-b45f-799ff6c14841\",\r\n    \"c86d7ff4-6598-4f60-8e8d-fc6e46f84b9f\",\r\n    \"bbd133c0-e567-4a20-8d45-51e6e17dfca2\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/access/?identityId=d7636124-3758-40f0-bb3c-51b0c06c916a&requestedById=4139d564-4f7f-49e6-8e13-0d0b5a3c2a3f",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								""
							],
							"query": [
								{
									"key": "identityId",
									"value": "d7636124-3758-40f0-bb3c-51b0c06c916a"
								},
								{
									"key": "requestedById",
									"value": "4139d564-4f7f-49e6-8e13-0d0b5a3c2a3f"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessByClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - objects\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.objects).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'objects' array should be empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.objects).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/access/search?requestedById=7b09b729-bb12-4eae-b30b-013cc0462532&objectEntityClass=GroupObject&createdByMyOwn=true&pagesize=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"search"
							],
							"query": [
								{
									"key": "requestedById",
									"value": "7b09b729-bb12-4eae-b30b-013cc0462532"
								},
								{
									"key": "objectEntityClass",
									"value": "GroupObject"
								},
								{
									"key": "createdByMyOwn",
									"value": "true"
								},
								{
									"key": "identityId",
									"value": "7b09b729-bb12-4eae-b30b-013cc0462532",
									"disabled": true
								},
								{
									"key": "pagesize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AccessByClass OtherComp",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/access/search?identityId=d7636124-3758-40f0-bb3c-51b0c06c916a&requestedById=4139d564-4f7f-49e6-8e13-0d0b5a3c2a3f&objectEntityClass=GroupObject",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"access",
								"search"
							],
							"query": [
								{
									"key": "identityId",
									"value": "d7636124-3758-40f0-bb3c-51b0c06c916a"
								},
								{
									"key": "requestedById",
									"value": "4139d564-4f7f-49e6-8e13-0d0b5a3c2a3f"
								},
								{
									"key": "objectEntityClass",
									"value": "GroupObject"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Helpers AddEntityProperty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type should be application/json\", function() {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityClass\": \"Carw\",\r\n    \"propertyNewName\": \"z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/helpers/entity/addProperty?requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"helpers",
								"entity",
								"addProperty"
							],
							"query": [
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Helpers RenameEntityProperty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is in the expected format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityClass\": \"Motorbike\",\r\n    \"propertyOldName\": \"farbe\",\r\n    \"propertyNewName\": \"color\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/helpers/entity/renameProperty?requestedById=11c408e0-1fcd-11ee-be56-0242ac120005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"helpers",
								"entity",
								"renameProperty"
							],
							"query": [
								{
									"key": "requestedById",
									"value": "11c408e0-1fcd-11ee-be56-0242ac120005"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Helpers addObjectAndGiveAccess",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identityId\": \"11c408e0-1fcd-11ee-be56-0242ac120005\",\r\n    \"objectId\": \"03389644-a202-449a-8906-69fab4dbd138\",\r\n    \"objectEntityClass\": \"Carw\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/helpers/object/access/?identityId=67efe382-e897-4fdc-a186-19df857386bd&requestedById=cf544d2f-a85d-4cc4-8e19-990188cc1da4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"helpers",
								"object",
								"access",
								""
							],
							"query": [
								{
									"key": "identityId",
									"value": "67efe382-e897-4fdc-a186-19df857386bd"
								},
								{
									"key": "requestedById",
									"value": "cf544d2f-a85d-4cc4-8e19-990188cc1da4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Identity",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "V3",
			"item": [
				{
					"name": "Test",
					"item": [
						{
							"name": "Create Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"// Generate a random UUID\r",
											"const randomUUID = uuid.v4();\r",
											"\r",
											"// Set the UUID to an environment variable\r",
											"pm.environment.set(\"identityA\", uuid.v4());\r",
											"pm.environment.set(\"identityB\", uuid.v4());\r",
											"pm.environment.set(\"identityC\", uuid.v4());\r",
											"pm.environment.set(\"objectX\", uuid.v4());\r",
											"pm.environment.set(\"objectY\", uuid.v4());\r",
											"pm.environment.set(\"objectZ\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://www.transit-project.de/",
									"protocol": "https",
									"host": [
										"www",
										"transit-project",
										"de"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"id\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"id\": \"{{identityB}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"id\": \"{{identityC}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectY}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Z",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectZ}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access A for B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access A for B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access B for C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"c\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\"b\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\"\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access B for C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"c\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\"b\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\"\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access A for C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access A for C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessByList X,Y,Z For A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.objects).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Objects array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.objects).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.objects.length).to.be.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"objectIds\": [\r\n        \"{{objectX}}\",\r\n        \"{{objectY}}\",\r\n        \"{{objectZ}}\"   \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/?identityId={{identityA}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										""
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityA}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Finer Grained",
					"item": [
						{
							"name": "Create Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"// Set the UUID to an environment variable\r",
											"pm.environment.set(\"identityA\", uuid.v4());\r",
											"pm.environment.set(\"identityB\", uuid.v4());\r",
											"pm.environment.set(\"identityC\", uuid.v4());\r",
											"pm.environment.set(\"objectX\", uuid.v4());\r",
											"pm.environment.set(\"objectY\", uuid.v4());\r",
											"pm.environment.set(\"objectZ\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ping",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Log the response for debugging purposes",
											"console.log(\"Response JSON:\", jsonResponse);",
											"",
											"// Check if the access token is present in the response",
											"if (jsonResponse.applicationId) {",
											"    // Set the access token as an environment variable",
											"    pm.environment.set(\"application\", jsonResponse.applicationId);",
											"}",
											"",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"applicationName\": \"TestApplication\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"id\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityB}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityC}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectY}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Z",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectZ}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 1 - Giving rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 8\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 10,\r\n                    \"readableDigitsTo\": 15\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessByList X,Y,Z For A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.objects).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Objects array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.objects).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.objects.length).to.be.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"objectIds\": [\r\n        \"{{objectX}}\",\r\n        \"{{objectY}}\",\r\n        \"{{objectZ}}\"   \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/?identityId={{identityA}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										""
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityA}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 2 - Decreasing rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 2\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 103,\r\n                    \"readableDigitsTo\": 110\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C - Check decreased rights",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 5\r\n                },\r\n                \r\n                {\r\n                    \"readableDigitsFrom\": 20,\r\n                    \"readableDigitsTo\": 50\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 30\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "V4",
			"item": [
				{
					"name": "Application",
					"item": [
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Log the response for debugging purposes",
											"console.log(\"Response JSON:\", jsonResponse);",
											"",
											"// Check if the access token is present in the response",
											"if (jsonResponse.applicationId) {",
											"    // Set the access token as an environment variable",
											"    pm.environment.set(\"application\", jsonResponse.applicationId);",
											"}",
											"",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"applicationName\": \"TestApplication\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"applicationName\": \"TestApplication3\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"applicationName\": \"TestApplication\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application?identityId={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Identity",
					"item": [
						{
							"name": "Identity A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Object",
					"item": [
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object/{{objectX}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object",
										"{{objectX}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object/{{objectX}}?requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Access",
					"item": [
						{
							"name": "Access X for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test_Run_Application1",
					"item": [
						{
							"name": "Create Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"// Set the UUID to an environment variable\r",
											"pm.environment.set(\"identityA\", uuid.v4());\r",
											"pm.environment.set(\"identityB\", uuid.v4());\r",
											"pm.environment.set(\"identityC\", uuid.v4());\r",
											"pm.environment.set(\"objectX\", uuid.v4());\r",
											"pm.environment.set(\"objectY\", uuid.v4());\r",
											"pm.environment.set(\"objectZ\", uuid.v4());\r",
											"pm.environment.set(\"application\", uuid.v4());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ping",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"applicationId\": \"{{application}}\",    \r\n    \"applicationName\": \"TestApplication#{{application}}\",\r\n    \"identityId\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityB}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"identityId\": \"{{identityC}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/identity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"identity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectY}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Z",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectZ}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 1 - Giving rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 8\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 10,\r\n                    \"readableDigitsTo\": 15\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessByList X,Y,Z For A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.objects).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Objects array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.objects).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.objects.length).to.be.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"objectIds\": [\r\n        \"{{objectX}}\",\r\n        \"{{objectY}}\",\r\n        \"{{objectZ}}\"   \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/?identityId={{identityA}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										""
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityA}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 2 - Decreasing rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 2\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 103,\r\n                    \"readableDigitsTo\": 110\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C - Check decreased rights",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 5\r\n                },\r\n                \r\n                {\r\n                    \"readableDigitsFrom\": 20,\r\n                    \"readableDigitsTo\": 50\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 30\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test_Run_Application2",
					"item": [
						{
							"name": "Create Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');\r",
											"\r",
											"pm.environment.set(\"application2\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ping",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - id and name\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Id is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"applicationId\": \"{{application2}}\",    \r\n    \"applicationName\": \"TestApplication2#{{application2}}\",\r\n    \"identityId\": \"{{identityA}}\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object X",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectX}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectY}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Z",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identityId\": \"{{identityA}}\",\r\n    \"objectId\": \"{{objectZ}}\",\r\n    \"objectEntityClass\": \"TestObject\",\r\n    \"properties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/object",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"object"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",   \r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",  \r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\"    \r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 1 - Giving rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\"\r\n    \r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",    \r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\"      \r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\"\r\n        \r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 8\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 10,\r\n                    \"readableDigitsTo\": 15\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 4\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 10\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccessByList X,Y,Z For A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.objects).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Objects array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.objects).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.objects.length).to.be.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"objectIds\": [\r\n        \"{{objectX}}\",\r\n        \"{{objectY}}\",\r\n        \"{{objectZ}}\"   \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/?identityId={{identityA}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										""
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityA}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for B by A - 2 - Decreasing rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"e\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"d\",\r\n        \"e\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"a\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 5\r\n                }\r\n            ],\r\n            \"type\": \"shareReadProperties\"\r\n        },\r\n        {\r\n            \"property\": \"b\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 2\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 3,\r\n                    \"readableDigitsTo\": 100\r\n                },\r\n                {\r\n                    \"readableDigitsFrom\": 103,\r\n                    \"readableDigitsTo\": 110\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access X for C by C - Check decreased rights",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectX}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectX}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B by A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 1,\r\n                    \"readableDigitsTo\": 5\r\n                },\r\n                \r\n                {\r\n                    \"readableDigitsFrom\": 20,\r\n                    \"readableDigitsTo\": 50\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityA}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityA}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectY}}?identityId={{identityB}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityB}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C by B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"readProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"writeProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareReadProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"shareWriteProperties\": [\r\n        \"d\"\r\n    ],\r\n    \"digitsAccess\": [\r\n        {\r\n            \"property\": \"d\",\r\n            \"readableDigits\": [\r\n                {\r\n                    \"readableDigitsFrom\": 4,\r\n                    \"readableDigitsTo\": 30\r\n                }\r\n            ],\r\n            \"type\": \"readProperties\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityB}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Y for C Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/application/{{application2}}/access/{{objectY}}?identityId={{identityC}}&requestedById={{identityC}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"application",
										"{{application2}}",
										"access",
										"{{objectY}}"
									],
									"query": [
										{
											"key": "identityId",
											"value": "{{identityC}}"
										},
										{
											"key": "requestedById",
											"value": "{{identityC}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add(",
					"    {",
					"        key: \"X-API-KEY\",",
					"        value:",
					"            pm.environment.get(\"X-API-KEY\")",
					"    }",
					")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}